/*
import React, { FC,useState } from 'react';
import { createStyles, Theme, withStyles } from '@material-ui/core/styles';
import FormControl from '@material-ui/core/FormControl';
import { InputBaseProps } from '@material-ui/core/InputBase';
import InputAdornment from '@material-ui/core/InputAdornment';
import uuid from 'uuid/v4';
import SVGIcon from '../SVGIcon';
import Input from '../Input';
import styles from '../../Groups/components/CreateGroup/CreateGroup.module.sass';
import Typography from '@material-ui/core/Typography';
import Loading from '../Loading';
import _ from 'lodash';
import Image from '../Image/Image';

interface IStyles {
  classes: {
    root: string;
    input: string;
    inputRoot: string;
  };
}

export type AutocompleteProps = InputBaseProps & {
  id?: string;
  value?: string;
  items?: any[];
  searchIconPosition?: any
};
const style = {
  inputAdornment: { minWidth: '16px', height: '16px' }
};
const SearchBase: FC<AutocompleteProps & IStyles> = (props) => {
  const { classes,items, searchIconPosition, placeholder = 'Search...', id, inputProps, onChange, value, onFocus, onBlur } = props;
  const inputId = id || `id-${uuid()}`;

  const [isOptionLoading,setIsOptionLoading] = useState(false)

  return (
    <div>
      <FormControl className={classes.root}>
        <Input
          {...(inputProps as InputBaseProps)}
          id={inputId}
          placeholder={placeholder}
          startAdornment={searchIconPosition && (
            <InputAdornment position={searchIconPosition}>
              <SVGIcon name={'search'} style={style.inputAdornment}/>
            </InputAdornment>
          )}
          onFocus={onFocus}
          onBlur={onBlur}
          value={value}
          onChange={onChange}
          classes={{ root: classes.input, input: classes.inputRoot }}
        />
      </FormControl>
      <div className={styles.options}>
        {isOptionLoading ? (
          <Loading className={styles.loadBlock} />
        ) : items && items.length === 0 ? null : items.map(({ key,value }) => (
              <div key={key} className={styles.optionItem}>
                <div className={styles.infoWrapper}>
                  <div className={styles.info}>
                    <Typography className={styles.title}>{value}</Typography>
                  </div>
                </div>
              </div>
            ))
        }
      </div>

      {selectedPharmacies && selectedPharmacies.length > 0
        ? selectedPharmacies.map((row: any) => {
          const { address } = row;
          return (
            <div key={row._id} className={styles.pharmacyItem}>
              <div className={styles.infoWrapper}>
                <Image
                  className={styles.photo}
                  alt={'No Avatar'}
                  src={row.preview}
                  width={200}
                  height={200}
                  cognitoId={sub}
                />
                <div className={styles.info}>
                  <Typography className={styles.title}> {row.name}</Typography>
                  <Typography
                    className={styles.subTitle}
                  >{`${address.number} ${address.street} ${address.city} ${address.zip} ${address.state}`}</Typography>
                </div>
              </div>
              <SVGIcon
                className={styles.closeIcon}
                name="close"
                onClick={() => {
                  handleRemovePharmacy(row).catch();
                }}
              />
            </div>
          );
        })
        : null}
    </div>
  );
};

const Search = withStyles((theme: Theme) =>
  createStyles({
    root: {
      marginBottom: theme.spacing(1),
      width: '100%'
    },
    input: {
      'label + &': {
        marginTop: '0 !important'
      }
    },
    inputRoot: {
      width: '100%'
    }
  })
)(SearchBase);

export default Search;
*/
